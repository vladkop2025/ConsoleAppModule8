using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using static ConsoleApp8.Program;

namespace ConsoleApp8
{
    class Program
    {
        static void Main(string[] args)
        {
            //Модуль 8.Работа с файлами - 8.1. Понятие файловой системы

            /*
            файловая система — это пространство, выделяемое операционной системой для хранения и доступа к информации на любом физическом носителе(жесткий диск, SSD, 
            карта памяти и другие).

            Когда ваша программа обращается к файлу, она не имеет никакого представления о том, каким образом расположена информация в конкретном файле, так же как и о том, 
            на каком физическом носителе он хранится. 

            Всё, что знает программа — это имя файла, его размер и атрибуты. Эти данные она получает от драйвера файловой системы. Именно файловая система устанавливает, 
            где и как будет записан файл на физическом носителе.

            С точки зрения операционной системы, весь диск представляет собой набор кластеров (как правило, размером 512 байт и больше). Драйверы файловой системы организуют 
            кластеры в файлы и каталоги-папки (реально являющиеся файлами, содержащими список файлов в этом каталоге). Эти же драйверы отслеживают, какие из кластеров в 
            настоящее время используются, какие свободны, а какие помечены как неисправные.

            Однако файловая система не обязательно напрямую связана с физическим носителем информации. Существуют виртуальные файловые системы, а также сетевые файловые системы, 
            которые являются лишь способом доступа к файлам, находящимся на удаленном компьютере (например, когда вам на работе предоставляют доступ к сетевому диску с документацией).

            Существует множество различных файловых систем, отличающихся друг от друга внутренней организацией, но для конечного пользователя все они выглядят как древовидная 
            структура из вложенных каталогов (папок).

            При этом каталоги, физически расположенные на разных носителях, могут образовывать несколько отдельных деревьев, как в Windows: 

            Или образовывать один корневой каталог, как в UNIX-подобных операционных системах (Linux, MacOS):

            В зависимости от типа физического носителя могут использоваться различные типы файловых систем. 

            Давайте перечислим наиболее распространенные: 

                Для носителей с произвольным доступом (например, жёсткий диск): FAT32, NTFS, HPFS, ext2 и другие. 
                Для flash-памяти: YAFFS, ExtremeFFS, exFAT.
                Для носителей с последовательным доступом (например, магнитные ленты): QIC и другие.
                Для оптических носителей CD и DVD: ISO9660, HFS, UDF и другие.

            Сейчас нет смысла рассматривать подробно свойства каждой из них, но можно отметить некоторые особенности, с которыми вы могли столкнуться.

            К примеру,  система FAT32 позволяет сохранять файлы максимального объема 4 ГБ, таким образом, если вы хотите сохранить на flash-память большой файл, 
            носитель придется переформатировать в систему NTFS.

            Задание 8.1.1 
            Где может располагаться файловая система?

                1. На жестком диске компьютера                          X
                2. В оперативной памяти компьютера
                3. На любых съемных носителях (flash-карта, CD-диск)    X
                4. Все варианты возможны

            Оперативная память используется программами для временного хранения необходимых в работе данных. У пользователя нет прямого доступа к этой информации.

            Задание 8.1.2
            Откуда ваша программа получает информацию о файле, хранящемся в системе?

                Нужно передать на вход при запуске программы
                От драйвера файловой системы                            X
                Из системного реестра
                Из BIOS

            Задание 8.1.3
            В чем различие организации файловых систем в Windows и Unix-подобных ОС ?

                В Windows все файлы находятся в общем корневом каталоге, а в Unix количество корневых каталогов равно количеству дисков         X
                В Unix один корневой каталог, а в Windows — для каждого диска свой                                                                      
                Windows поддерживает запись файлов объемом больше 4 ГБ только при использовании файловой системы NTFS
                Нет принципиальных различи

            Задание 8.1.4
            Придумайте простой класс, который будет предоставлять информацию об установленном в системе диске. 

            Нужны свойства, чтобы хранить: имя диска , объём, свободное место. Свойства инициализируются при создании нового объекта в методе-конструкторе.

            Ответ:

                public class Drive
                {
                    public Drive(string name, long totalSpace, long freeSpace)
                    {
                        Name = name;
                        TotalSpace = totalSpace;
                        FreeSpace = freeSpace;
                    }

                    public string Name { get; }
                    public long TotalSpace { get; }
                    public long FreeSpace { get; }
                 }

            Задание 8.1.
            5Сейчас пользователь видит, что у  вас на диске все файлы лежат в одной куче.

                Нужно создать папки (директории) для сортировки файлов. 

                Добавьте метод для создания новой директории на диске. Для этих целей отлично подойдет коллекция Dictionary, с которой более детально вы познакомитесь далее по курсу.

                Словарь — тип коллекций. Он хранит объекты, которые представляют пару ключ-значение, то есть, обращаясь по ключу, мы можем получить значение.

                Пусть директория (папка) будет представлена классом: 

                    public class Folder
                    {
                        public List<string> Files { get; set; } = new List<string>();
                    }

            Реализация метода: 

            Принимает на вход имя папки, добавляет её в коллекцию папок, выводит информацию о том, что папка создана

                Dictionary<string, Folder> Folders = new Dictionary<string, Folder>();
 
                    public void CreateFolder(string name)
                    {
                        Folders.Add(name, new Folder());
                    }

            Задание 8.1.6
            Представьте, что вам нужно создать класс, который представлял бы системный диск. Для него нужно предусмотреть свойство ReservedSpace, 
            чтобы знать, сколько пространства занято системой.

            Как вы решите эту задачу?

                Создам новый класс SystemDrive, реализую там все те же методы и свойства, что и в классе Drive, и добавлю новое свойство ReservedSpace
                Создам класс SystemDrive, добавлю наследование от Drive, добавлю недостающее свойство ReservedSpace                                         X
                Не буду создавать новый класс, добавлю в класс Drive свойство IsSystemDrive и свойство ReservedSpace
                Все способы подходят

            Задание 8.1.7
            Дан класс, представляющий папку (директорию):

            public class Folder
            {
                public Folder(string name)
                {        
                    Name = name;
                }
  
                string Name { get; set; }
                List<string> Files { get; set; } = new List<string>();
 
                void AddFile(string name)
                {
                    if(!Files.Contains(name))
                    Files.Add(name);
                }
            }
             
            Что нужно сделать, чтобы создать папку и добавить в неё новый файл?

                1. Данный класс — статический, поэтому нам не нужно создавать объект. Просто вызываем у себя в коде File.Add("НоваяПапка")
                2. Создаем объект класса Folder, вызываем у него метод AddFile("НоваяПапка")
                3. Чтобы использовать методы класса в других классах, нужно добавить в них модификатор public, после чего возможен любой вариант, 1 или 2
                4. Нужно изменить модификатор доступа метода на public, после чего можно будет вызвать его у объекта класса Folder                          X

            Верно:модификатор public разрешает доступ к методу из других классов, если подключен соответствующий неймспейс

            Задание 8.1.8
            У вас есть готовый класс Drive для представления диска в системе (который вы написали для задания выше). Вам нужно предусмотреть 
            в вашей системе несколько типов дисков (USB, CD, HDD).

            Как будете решать эту задачу?
            
                Все типы дисков должны иметь те же свойства и методы, что и мой общий класс Drive, поэтому создам отдельные классы для каждого вида и унаслеледую функционал из базового класса:
                    public class USBDrive : Drive 
                    public class CDDrive : Drive 
                    public class HDDDrive : Drive 

                Не буду наследоваться, создам отдельные классы, так как впоследствии может выясниться, что функционал будет отличаться

                Добавлю в базовый класс тип-перечисление:  X
                    DriveType 
                    {
                       USB,
                       HDD,
                       CD
                    }

            Верно:перечисления используют, когда необходимо как-то различать разные объекты одного типа

             Итоги

                Итак, в этом юните мы:

                освежили в памяти понятие файловой системы; 
                познакомились с механизмом работы файловой системы;
                узнали о функциях драйвера файловой системы;
                рассмотрели особенности отображения и работы файловой системы в различных операционных системах;
                познакомились с различными типами файловых систем, применяемых для различных физических носителей;
                рассмотрели некоторые ограничения файловых систем.
                В последующих юнитах будем рассматривать инструменты языка C#, которые вы сможете использовать в своих программах для доступа к данным, хранящимся в файловой система компьютера.

            */

            //Пример:

        // Создаем менеджер папок
        FolderManager manager = new FolderManager();

        // Добавляем папки
        manager.AddFolder("Мои документы");
        manager.AddFolder("Фото");

        // Создаем список файлов для добавления
        List<string> files = new List<string> { "документ.txt", "фото.jpg", "отчет.docx" };

        // Добавляем файлы во все папки
        manager.AddFilesToAllFolders(files);

        // Выводим информацию о папках и их файлах
        manager.PrintFoldersInfo();

        }
        public class Folder
        {
            public string Name { get; set; } // Имя папки
            public List<string> Files { get; set; } = new List<string>(); // Список файлов
        }

        public class FolderManager
        {
            // Коллекция для хранения папок
            private List<Folder> folders = new List<Folder>();

            // Метод для добавления папки
            public void AddFolder(string folderName)
            {
                Folder newFolder = new Folder { Name = folderName };
                folders.Add(newFolder);
                Console.WriteLine($"Папка '{folderName}' создана.");
            }

            // Метод для добавления файлов во все папки
            public void AddFilesToAllFolders(List<string> fileNames)
            {
                foreach (var folder in folders) // Проходим по каждой папке
                {
                    folder.Files.AddRange(fileNames); // Добавляем файлы в папку
                    Console.WriteLine($"Файлы добавлены в папку '{folder.Name}'.");
                }
            }

            // Метод для вывода информации о папках и их файлах
            public void PrintFoldersInfo()
            {
                foreach (var folder in folders)
                {
                    Console.WriteLine($"Папка: {folder.Name}");
                    Console.WriteLine("Файлы:");
                    foreach (var file in folder.Files)
                    {
                        Console.WriteLine($"- {file}");
                    }
                    Console.WriteLine(); // Пустая строка для разделения
                }
            }
        }

    }
}
