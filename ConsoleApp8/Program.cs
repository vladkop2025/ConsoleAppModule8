using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApp8
{
    class Program
    {
        static void Main(string[] args)
        {
            //Модуль 8.Работа с файлами - Введение

            /* В этом модуле мы рассмотрим, как решать одну из основных задач программирования при работе с данными — операции с файлами и директориями, их изменение, удаление и создание.

            Вы научитесь пользоваться классами и методами для всех возможных операций с файловой системой, которые представлены в обширной стандартной библиотеке языка С#. 

            При прохождении этого модуля вы:

                Познакомитесь с устройством файловой системы компьютера, узнаете, какие они бывают и чем различаются.

                Узнаете, как выполнять основные операции чтения / записи информации в файлы и потоки данных с помощью классов из пространства имен System.IO, 
                таких как Stream, StreamWriter, FileStream и др.

                Узнаете, как получать и обрабатывать информацию о дисках, установленных в системе с помощью класса Driveinfo.

                Узнаете, как работать с папками и системными каталогами с помощью классов Directory и Directoryinfo, и поймёте, где какой использовать.

                Научитесь работе с файлами с помощью File и Fileinfo.

                Научитесь работать с потоками данных с помощью базового класса, представляющего поток — Stream, и его расширениями, такими как Filestream(поток, 
                использующийся для чтения и записи данных в файл) и MemoryStream(поток, работающий с данными в памяти).

                Научитесь использовать StreamWriter для записи данных в текстовый файл и StreamReader для чтения, а также узнаете, для чего нужны StringWriter и StringReader.

                Научитесь выполнять операции с файлами не только в текстовом, но и в бинарном формате, преобразовывать файлы из одного формата в другой, используя 
                сериализацию через BinaryFormatter. Узнаете, когда и какой формат стоит использовать.

                Научитесь эффективно и безопасно работать с потоками данных, автоматически управляя выделением ресурсов с помощью конструкции using. 
                На примере конструкции using узнаете, для чего нужен интерфейс IDisposable. 
*/
        }
    }
}
